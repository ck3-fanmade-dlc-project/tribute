# 宗主->朝貢国 朝貢の確立
# based: offer_vassalization_interaction
establish_tributary_interactions = {
	interface_priority = 30

	category = interaction_category_vassal
	common_interaction = yes
	desc = establish_tributary_interactions_desc
	icon = icon_dismiss_temporary_regency

	ai_targets = {
		ai_recipients = neighboring_rulers
	}
	ai_target_quick_trigger = {
		adult = yes
	}
	ai_frequency = 12

	# どういうときに表示されるか
	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:actor = {is_independent_ruler = yes}
		# 宗主
		scope:actor = {
			highest_held_title_tier > tier_duchy
		}
		# 朝貢国
		scope:recipient = {
			NOT = { this = scope:actor }
			is_landed = yes
			is_independent_ruler = yes
			OR = {
				highest_held_title_tier < scope:actor.highest_held_title_tier
				AND = {
					highest_held_title_tier = tier_empire
					scope:actor.highest_held_title_tier = tier_empire
				}
			}
			NOT = { government_has_flag = can_not_be_vassal_or_liege }
		}
	}

	# どういうときに使用可能になるか
	is_valid_showing_failures_only = {
		# 他国の朝貢国でないとき
		custom_tooltip = {
			text = this_is_tributary_state_of_other_county
			NOT = { have_other_tributary_relation_trigger = { OVERLOAD = scope:actor TRIBUTARY = scope:recipient } }
		}
		# 既に自分の朝貢国でないとき
		custom_tooltip = {
			text = we_have_tributary_relation
			NOT = { is_valid_tributary_relation_trigger = { OVERLOAD = scope:actor TRIBUTARY = scope:recipient } }
		}

		custom_tooltip = {
			text = i_am_tributary
			NOT = { scope:actor = { i_am_tributary_trigger = yes } }
		}

		scope:actor = {is_independent_ruler = yes}

		scope:recipient = {
			is_at_war = no

			custom_description = {
				text = was_recently_granted_independence
				NOT = {
					has_opinion_modifier = {
						modifier = granted_independence_opinion
						target = scope:actor
					}
				}
			}
		}
	}

	greeting = positive
	notification_text = OFFER_VASSALIZATION_INTERACTION_NOTIFICATION # todo

	ai_min_reply_days = 5
	ai_max_reply_days = 10

	ai_accept = {
		base = -50
	}

	on_accept = {
		establish_tributary_interaction_effect = { OVERLOAD = scope:actor TRIBUTARY = scope:recipient }
		scope:actor = {
			trigger_event = tribute_interaction.0001
		}
	}

	on_decline = {
		scope:actor = {
			trigger_event = tribute_interaction.0002
		}
	}

	ai_potential = {
		is_adult = yes
		is_independent_ruler = yes
		highest_held_title_tier > tier_county
	}

	ai_will_do = {
		base = 100

		modifier = { # If the recipient is a player, do not bother sending
			factor = 0
			scope:recipient = {
				is_ai = no
			}
		}
	}
}

# 朝貢国->宗主 朝貢国化の提案
# based: offer_fealty_interaction
become_tributary_interactions = {
	interface_priority = 30

	category = interaction_category_vassal
	common_interaction = yes
	desc = become_tributary_interactions_desc
	icon = icon_dismiss_entrenched_regency

	ai_targets = {
		ai_recipients = neighboring_rulers
	}
	ai_target_quick_trigger = {
		adult = yes
	}
	ai_frequency = 12
	ai_maybe = yes


	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:actor.highest_held_title_tier < scope:recipient.highest_held_title_tier
		scope:actor.liege = scope:actor
		scope:recipient = {
			liege = this
			is_landed = yes
		}
	}

	is_valid_showing_failures_only = {
		# 既にこの国の朝貢国である場合
		custom_tooltip = {
			text = we_have_tributary_relation
			NOT = { is_valid_tributary_relation_trigger = { OVERLOAD = scope:recipient TRIBUTARY = scope:actor } }
		}
		# 既に他の国の朝貢国である場合
		custom_tooltip = {
			text = i_have_already_other_tributary_relation
			NOT = { have_other_tributary_relation_trigger = { OVERLOAD = scope:recipient TRIBUTARY = scope:actor } }
		}
		# 私は宗主国である
		custom_tooltip = {
			text = i_am_overload
			scope:actor = { NOT = { i_am_overload_trigger = yes } }
		}

		scope:actor = {
			is_imprisoned = no
			is_at_war = no
		}
		scope:recipient = {
			custom_description = {
				text = "offer_fealty_neighboring_condition"
				subject = scope:recipient
				OR = {
					any_neighboring_and_across_water_top_liege_realm_owner = { this = scope:actor }
					any_held_title = {
						is_de_jure_liege_or_above_target = scope:actor.capital_barony
					}
				}
			}
		}
	}
	greeting = positive
	notification_text = OFFER_FEALTY_INTERACTION_NOTIFICATION

	ai_min_reply_days = 5
	ai_max_reply_days = 10

	ai_accept = { # todo
		base = 50
		# MAIN
		# Heretic/Infidel modifier.
		# Tier difference modifier.
		# Dejure modifier.
		# Distant/Remote Realm modifier.

		# MINOR
		# Rivalry modifier.
		# Same Dynasty modifier.
		# Cultural/Cultural Group modifiers.
		# Claimant modifier.

		# OPINION SCALES
		# Personality modifier.
		# Compare Opinion modifier.

		modifier = { # Different faith, no pluralism.
			desc = offer_vassalization_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:actor = {
					NOR = { # Of two different faiths AND the potential vassal's faith is not pluralistic.
						faith = scope:recipient.faith
						faith = { has_doctrine = doctrine_pluralism_pluralistic }
					}
				}
			}
			add = {
				value = -25
				if = {
					limit = {
						scope:actor.faith = {
							faith_hostility_level = {
								target = scope:recipient.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -10
				}
				if = {
					limit = {
						scope:actor.faith = {
							faith_hostility_level = {
								target = scope:recipient.faith
								value >= faith_evil_level
							}
						}
					}
					add = -25
				}
			}
		}

		modifier = { # I am a King!
			desc = offer_fealty_interaction_aibehavior_amkingtier_tt
			trigger = {
				scope:actor = { highest_held_title_tier = tier_kingdom }
			}
			add = -10
		}
		modifier = { # Wide difference in rank
			desc = offer_vassalization_interaction_aibehavior_widetitletier_tt
			trigger = {
				scope:actor = {
					tier_difference = {
						target = scope:recipient
						value > 1
					}
				}
			}
			add = 20
		}
		modifier = { # They are my Rightful Liege
			desc = offer_vassalization_interaction_aibehavior_rightfulvassaltitleholder_tt
			trigger = {
				is_rightful_liege_of_trigger = {
					VASSAL = scope:actor
					LIEGE = scope:recipient
				}
			}
			add = 25
		}
		modifier = { # Distant Realm.
			desc = offer_vassalization_interaction_aibehavior_distantrealm_tt
			trigger = {
				scope:actor = {
					NOT = {
						any_neighboring_top_liege_realm_owner = { this = scope:recipient }
					}
				}
				scope:actor.capital_province = { squared_distance = { target = scope:recipient.capital_province value < 200000 } }
			}
			add = -15
		}
		modifier = { # Remote Realm.
			desc = offer_vassalization_interaction_aibehavior_remoterealm_tt
			trigger = {
				scope:actor = {
					NOT = {
						any_neighboring_top_liege_realm_owner = { this = scope:recipient }
					}
				}
				scope:actor.capital_province = { squared_distance = { target = scope:recipient.capital_province value >= 200000 } }
			}
			add = -25
		}

		# MINOR
		modifier = { # Rivalry modifier.
			desc = offer_vassalization_interaction_aibehavior_rival_tt
			trigger = {
				scope:recipient = {
					has_relation_rival = scope:actor
					NOT = { has_relation_nemesis = scope:actor }
				}
			}
			add = -10
		}
		modifier = { # Nemesis modifier.
			desc = offer_vassalization_interaction_aibehavior_nemesis_tt
			trigger = {
				scope:recipient = {
					has_relation_nemesis = scope:actor
				}
			}
			add = -30
		}
		modifier = { # Same Dynasty modifier.
			desc = offer_vassalization_interaction_aibehavior_dynasty_tt
			trigger = {
				scope:recipient = {
					dynasty = scope:actor.dynasty
				}
			}
			add = 10
		}

		modifier = { # Cultural Acceptance
			add = -5
			desc = cultural_acceptance_interaction_reason
			trigger = {
				scope:actor = {
					NOT = { has_same_culture_as = scope:recipient }
					culture = {
						cultural_acceptance = { target = scope:recipient.culture value < 50 }
					}
				}
			}
		}

		modifier = { # Same language
			add = 5
			desc = speaks_same_language_interaction_reason
			trigger = {
				scope:actor = {
					knows_language_of_culture = scope:recipient.culture
				}
			}
		}

		modifier = { # Claimant modifier.
			desc = offer_vassalization_interaction_aibehavior_claimant_tt
			trigger = {
				scope:actor.primary_title = {
					scope:recipient = {
						has_claim_on = prev
					}
				}
			}
			add = -15
		}

		# PERSONALITY
		ai_value_modifier = {
			ai_greed = 0.75
			min = 0
		}

		# OPINION INFLUENCE
		opinion_modifier = { # Compare Opinion modifier.
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.5
		}
	}

	on_accept = {
		# offer_fealty_interaction_effect = yes
		establish_tributary_interaction_effect = { OVERLOAD = scope:recipient TRIBUTARY = scope:actor }

		scope:actor = {
			trigger_event = tribute_interaction.0010
		}
	}

	on_decline = {
		scope:actor = {
			trigger_event = tribute_interaction.0011
		}
	}

	ai_potential = {
		is_adult = yes
		is_independent_ruler = yes
		highest_held_title_tier >= tier_county
		highest_held_title_tier < tier_empire
	}

	# based: negotiate_alliance_interaction
	ai_will_do = { # todo
		base = 0
		
		modifier = {
			add = 100
			any_ally = {
				count < 2
			}
			scope:recipient = { # Don't propose alliances to tiny insignificant rulers just because
				OR = {
					current_military_strength >= scope:actor.eighty_percent_of_current_military_strength
					primary_title.tier >= scope:actor.primary_title.tier
					AND = {
						primary_title.tier >= tier_duchy
						scope:actor.primary_title.tier < tier_empire
					}
				}
			}
		}
		
		modifier = { # Clans always want alliances with Vassals
			add = 100
			scope:actor = {
				government_has_flag = government_is_clan
			}
			scope:recipient = {
				is_vassal_of = scope:actor
			}
		}

		# Unity modifiers
		evaluate_action_increasing_house_unity = {
			VALUE = 100
		}
		
		modifier = { # The AI shouldn't propose to their Lieges
			factor = 0
			is_liege_or_above_of = scope:recipient
		}
		
		modifier = { # The AI shouldn't propose to their Vassals unless Clan
			factor = 0
			scope:actor = {
				NOT = { government_has_flag = government_is_clan }
			}
			scope:recipient = {
				is_vassal_of = scope:actor
			}
		}
	}
}

# 宗主->朝貢国 朝貢の停止
cancel_tributary_from_overload_interactions = {
	interface_priority = 30

	category = interaction_category_vassal
	common_interaction = yes
	desc = cancel_tributary_from_overload_interactions_desc
	icon = independence

	
	ai_target_quick_trigger = {
		adult = yes
	}
	# ai_frequency = 12
	# ai_targets = {
	# 	ai_recipients = neighboring_rulers
	# 	ai_recipients = scripted_relations
	# }

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		is_valid_tributary_relation_trigger = { OVERLOAD = scope:actor TRIBUTARY = scope:recipient }
	}

	auto_accept = yes
	on_auto_accept = {
		scope:recipient = {
			trigger_event = {
				id = tribute_interaction.0021
				days = 1
			}
		}
	}

	ai_will_do = {
		base = 100
	}
}

# 朝貢国->宗主 朝貢の停止
cancel_tributary_from_tributary_interactions = {
	interface_priority = 30

	category = interaction_category_vassal
	common_interaction = yes
	desc = cancel_tributary_from_tributary_interactions_desc
	icon = independence

	ai_target_quick_trigger = {
		adult = yes
	}
	# ai_frequency = 12
	# ai_targets = {
	# 	ai_recipients = neighboring_rulers
	# 	ai_recipients = scripted_relations
	# }

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		is_valid_tributary_relation_trigger = { OVERLOAD = scope:recipient TRIBUTARY = scope:actor }
	}

	auto_accept = yes
	on_auto_accept = {
		scope:recipient = {
			trigger_event = {
				id = tribute_interaction.0022
				days = 1
			}
		}
	}

	ai_will_do = {
		base = 100
	}
}

# 朝貢国->宗主国 防衛戦争への呼び出し
call_overload_to_defensive_war_interaction = {
	category = interaction_category_diplomacy
	icon = alliance

	interface_priority = 60

	desc = call_overload_to_defensive_war_interaction_desc
	
	interface = call_ally
	special_interaction = call_ally_interaction
	popup_on_receive = yes
	pause_on_receive = yes
	
	notification_text = CALL_OVERLOAD_DEFENSIVE_WAR_NOTIFICATION
	
	is_shown = {
		NOT = { scope:recipient = scope:actor }

		scope:actor = {
			any_character_war = {
				primary_defender = scope:actor
			}
		}

		is_valid_tributary_relation_trigger = { OVERLOAD = scope:recipient TRIBUTARY = scope:actor }
	}
	ai_maybe = yes
	
	has_valid_target = {
		exists = scope:target
	}
	
	has_valid_target_showing_failures_only = {
		scope:target = {
			is_war_leader = scope:actor
		}
		joiner_not_already_in_another_war_with_any_target_war_participants_trigger = {
			WARRIOR = scope:actor
			JOINER = scope:recipient
		}
	}

	is_valid_showing_failures_only = {
		custom_tooltip = {
			text = "is_already_in_all_wars"
			scope:actor = {
				any_character_war = {
					NOR = {
						is_participant = scope:recipient
						was_called = scope:recipient
					}
					OR = {
						primary_attacker = scope:actor
						primary_defender = scope:actor
					}
				}
			}
		}
	}

	can_be_picked = {
		can_join_war_liege_vassal_check_trigger = { WARRIOR = scope:actor JOINER = scope:recipient }
		# 同じ宗主の朝貢国であれば呼べない
		custom_tooltip = {
			text = call_overload_to_defensive_war_interaction_same_overload
			trigger_if = {
				limit = { scope:target.casus_belli.primary_attacker = { has_variable = is_tributary } }
				NOT = { is_valid_tributary_relation_trigger = { OVERLOAD = scope:recipient TRIBUTARY = scope:target.casus_belli.primary_attacker } }
			}
		}
	}

	on_auto_accept = {
		scope:recipient = {
			trigger_event = call_overload.0001
		}
	}
	
	on_accept = {
		call_overload_interaction_effect = yes
		if = {
			limit = { always = scope:hook }
			scope:actor = {
				use_hook = scope:recipient
			}
		}

		if = {
			limit = {
				exists = scope:target
			}

			scope:actor = {
				trigger_event = call_overload.0100
			}
		}
	}
	
	on_decline = {
		#The war could theoretically end on the day the decline is sent
		if = {
			limit = {
				exists = scope:target
			}

			# 朝貢国を見捨てた!
			scope:target = {
				scope:actor = {
					add_opinion = {
						modifier = abandoned_tributary_relation_opinion
						target = scope:recipient
					}
				}
				scope:recipient = {
					every_in_list = {
						variable = tributaries
						limit = { NOT = { this = scope:actor } }
						add_opinion = {
							modifier = general_abandoned_tributary_relation_opinion
							target = scope:recipient
						}
					}
				}

				scope:actor = {
					trigger_event = call_overload.0101
				}
			}

			# If we're a clan this interaction affects unity
			refuse_call_to_arms_add_clan_unity_effect = yes
		}
	}
	
	ai_accept = {
		base = 20

		modifier = {  # Refuse call to conflicts of little benefit
			add = -1000
			desc = WONT_FIGHT_MEANINGLESS_REASON
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { using_cb = fp2_border_raid }
				scope:recipient = { # Unless they like going on raids
					NOR = {
						has_trait = viking
						has_trait = reaver
					}
				}
			}
			trigger_else = { always = no }
		}

		modifier = {  # Refuse call against Heir
			add = -1000
			exists = scope:recipient.player_heir
			trigger_if = {
				limit = { scope:target.casus_belli.primary_defender = scope:actor }
				scope:target.casus_belli.primary_attacker = scope:recipient.player_heir
			}
			trigger_else = {
				scope:target.casus_belli.primary_defender = scope:recipient.player_heir
			}
			desc = WONT_FIGHT_HEIR_REASON
		}

		modifier = {  # Refuse call against Spouse
			add = -1000
			scope:recipient = {
				trigger_if = {
					limit = { scope:target.casus_belli.primary_defender = scope:actor }
					any_spouse = {
						this = scope:target.casus_belli.primary_attacker
					}
				}
				trigger_else = {
					any_spouse = {
						this = scope:target.casus_belli.primary_defender
					}
				}
				
			}
			desc = WONT_FIGHT_SPOUSE_REASON
		}

		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1.0
			desc = AI_OPINION_REASON
		}

		# Honor factor
		ai_value_modifier = {
			ai_honor = 1
			min = 0
		}

		modifier = {  # Tends to join defensive wars
			add = 50
			scope:target.casus_belli.primary_defender = scope:actor
			desc = DEFENSIVE_WAR_REASON
		}

		compare_modifier = { # Likes fighting infidels
			trigger = {
				scope:recipient.faith = scope:actor.faith
				OR = {
					AND = {
						scope:target.casus_belli.primary_attacker = {
							this = scope:actor
							faith = {
								faith_hostility_level = {
									target = scope:target.casus_belli.primary_defender.faith
									value >= religious_cb_enabled_hostility_level
								}
							}
						}
					}
					AND = {
						scope:target.casus_belli.primary_defender = {
							this = scope:actor
							faith = {
								faith_hostility_level = {
									target = scope:target.casus_belli.primary_defender.faith
									value >= religious_cb_enabled_hostility_level
								}
							}
						}
					}
				}
			}
			target = scope:recipient
			value = ai_zeal
			desc = "ZEAL_AGAINST_INFIDELS"
			min = 0
			multiplier = 0.5
		}

		modifier = {  # Reluctant to attack another ally
			add = -50
			scope:target.casus_belli.primary_attacker = scope:actor
			scope:recipient = {
				is_allied_to = scope:target.casus_belli.primary_defender
			}
			desc = ATTACK_ON_ALLY_REASON
		}

		modifier = {  # Reluctant to defend against another ally
			add = -25
			scope:target.casus_belli.primary_defender = scope:actor
			scope:recipient = {
				is_allied_to = scope:target.casus_belli.primary_attacker
			}
			desc = WAR_WITH_ALLY_REASON
		}

		modifier = {  # Reluctant to join wars against religious brethren.
			add = -50
			NOT = { scope:recipient.faith = scope:actor.faith }
			scope:target.casus_belli.primary_attacker = scope:actor
			scope:target.casus_belli.primary_defender.faith = scope:recipient.faith
			scope:target.casus_belli.war = {
				OR = {
					using_cb = minor_religious_war
					using_cb = religious_war
					using_cb = major_religious_war
					using_cb = undirected_great_holy_war
					using_cb = directed_great_holy_war
				}
			}
			desc = WONT_ATTACK_RELIGIOUS_BRETHREN_REASON
		}

		# 独自
		# 最近朝貢を断ったか?
		modifier = {
			add = -50
			has_opinion_modifier = {
				modifier = refused_tribute_opinion
				target = scope:actor
			}
		}

		# fp3_struggle_resist_allied_wars_modifier = yes
	}

	# call_ally_interactionのコピペ
	ai_will_do = {
		base = 100
		
		modifier = { # If the player is at war, do not bother them with offensive calls
			scope:target.casus_belli.primary_attacker = scope:actor
			scope:recipient = {
				is_ai = no
				any_character_war = {
					primary_defender = scope:recipient
				}
			}
			factor = 0
		}
		
		modifier = { # Don't call players in against their heirs (they wouldn't accept the reverse situation... don't be a hypocrite)
			exists = scope:recipient.player_heir
			scope:recipient = {			
				is_ai = no
			}
			trigger_if = {
				limit = { scope:target.casus_belli.primary_defender = scope:actor }
				scope:target.casus_belli.primary_attacker = scope:recipient.player_heir
			}
			trigger_else = {
				scope:target.casus_belli.primary_defender = scope:recipient.player_heir
			}
			factor = 0
		}
		
		modifier = { # Same with spouses
			scope:recipient = {			
				is_ai = no
			}
			trigger_if = {
				limit = { scope:target.casus_belli.primary_defender = scope:actor }
				any_spouse = {
					this = scope:target.casus_belli.primary_attacker
				}
			}
			trigger_else = {
				any_spouse = {
					this = scope:target.casus_belli.primary_defender
				}
			}
			factor = 0
		}
		
		modifier = { # Don't call brand-new allies into old wars, at least until some time has elapsed.
			has_variable = delay_calling_recent_ally
			var:delay_calling_recent_ally = scope:recipient
			scope:target = {
				war_days >= 30
			}
			factor = 0

		}

		modifier = { # If the recipient is allied to both the attacker and the defender, the attacker shouldn't call
			scope:target.casus_belli.primary_attacker = scope:actor
			scope:target.casus_belli.primary_defender = {
				is_allied_to = scope:recipient
			}
			factor = 0
		}
	}

	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:hook = yes
		}
	}

	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no
}

# 朝貢国->宗主国 `宗主国の封臣による朝貢国への攻撃戦争`の停止要請
request_stop_attacker_vassal_war_interaction = {
	category = interaction_category_diplomacy
	special_interaction = interfere_in_war_interaction
	# ai_accept_negotiation = yes
	popup_on_receive = yes
	pause_on_receive = yes
	icon = icon_retreat

	# send_name = "SEND_DEMAND"
	
	ai_maybe = yes
	
	prompt = STOP_VASSAL_WAR_ATTACKER

	# interface_priority = 60

	desc = request_stop_attacker_vassal_war_interaction_desc

	is_shown = {
		# i_am_tributary_trigger = yes
		scope:actor = {
			any_character_war = {
				is_war_leader = scope:recipient
				primary_attacker = scope:recipient
				primary_defender = scope:actor
			}
		}
	}
	is_valid_showing_failures_only = {
		custom_tooltip = {
			text = i_do_not_have_tributary_relation_with_this_characters_top_liege
			is_valid_tributary_relation_trigger = { OVERLOAD = scope:recipient.top_liege TRIBUTARY = scope:actor }
		}
	}

	auto_accept = yes
	on_auto_accept = {
		scope:recipient = {
			every_character_war = {
				limit = {
					is_war_leader = scope:recipient
					primary_attacker = scope:recipient
					primary_defender = scope:actor
				}
				end_war = white_peace 
			}
		}
	}
}